
// Evoke work flow and blueprint. 
zoho.crm.updateRecord("Leads",id,{"Owner":Simphiwe},{"trigger":{"workflow","blueprint","approval"}});


//Paging solution

mp = Map();
pages = {1,2,3,4,5,6};
all_leads = List();
for each  number in pages
{
	leads = zoho.crm.getRecords("Leads",number,200);
	//leads = zoho.crm.searchRecords("Leads","(opt_in:equals:false)");
	all_leads.addAll(leads);
	for each  lead_ in all_leads
	{
    // DO SOMETHING
	}
	info all_leads.size();
	if(leads.size() < 200)
	{
		break;
	}
}


/// Retrive ticket content

getthreads = zoho.desk.getRelatedRecords(orgid,"threads","tickets",ticketId,0,1);
threadid = getthreads.getJSON("data").getJSON("id");
getthreadcontent = zoho.desk.getRelatedRecordById(orgid,"threads",threadid,"tickets",ticketId).getJSON("content");
// updateticket = zoho.desk.update(orgid,"tickets",ticketId,{"cf":{"cf_description_cf":getthreadcontent}});
// info getthreadcontent;
Multi_Line = getthreadcontent.replaceAll("<(.|\n)*?>","").replaceAll("&nbsp;"," ").replaceAll("&amp;","&");
info Multi_Line.getSuffix("Hi");


ZOho desk Mass Update

ORGID = 7255****;
list = {0,1,2,3,4,5,6,7};
for each  rec in list
{
	start = rec * 100;
	searchValue = {"cf":{"cf_creator_record_id":""}};
	//search = zoho.desk.searchRecords(ORGID,"Tickets",searchValue, 0,100).getJSON("data");
	search = zoho.desk.searchRecords(ORGID,"tickets",start,100).getJSON("data");
	for each  contact in search
	{
		if(contact.getJSON("cf").get("cf_1_custom_field") != null)
		{
			info contact.getJSON("cf_1_custom_field_1") + " - " + contact.getJSON("cf").get("cf_1_custom_field") + "\n";
		}
		//contactids = contact.getJSON("id");
		// update =
		// zoho.desk.update(ORGID,"contacts",contactids,{"city":city});
		// info update;
	}
}
